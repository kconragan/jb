angular.module("app",["ui.router","ngAnimate","angular-carousel","templatescache","ngTextTruncate","projects"]).run(function(){FastClick.attach(document.body)}),angular.module("projects",[]),angular.module("app").config(["$stateProvider","$urlRouterProvider",function(t,e){e.otherwise("/projects"),t.state("projectList",{url:"/projects",controller:"ProjectsCtrl",templateUrl:"projects/projects.html"}).state("projectDetail",{url:"/projects/:id",controller:"ProjectCtrl",templateUrl:"projects/project.html"})}]),angular.module("app").controller("ViewController",["$scope",function(t){t.layoutConfig={fullBleed:"fullbleed"}}]).controller("ProjectsCtrl",["$scope","$http","$filter","dataService",function(t,e,o,r){t.layoutConfig.fullbleed="fullbleed",r.getAlbums().then(function(e){t.projects=e,t.predicate="-modified"})}]).controller("ProjectCtrl",["$scope","$stateParams","dataService",function(t,e,o){t.layoutConfig.fullbleed="",t.$on("$stateChangeSuccess",function(){}),o.getAlbumPhotos(e.id).then(function(e){t.currentArtwork=6,t.title=e.title,t.description=e.description,t.masthead=e.masthead,t.photos=e.photos,t.count=e.photos.length}),t.updateLightbox=function(e){console.log(typeof e),t.currentArtwork=parseInt(e)}}]),angular.module("app").directive("lightboxTrigger",["$timeout",function(t){"use strict";return{link:function(e,o,r){o.bind("click",function(){e.$apply(function(){e.currentArtwork!==r.currentIndex&&e.updateLightbox(r.currentIndex),$(".lightbox").removeClass("is-hidden")}),t(function(){},200)})}}}]).directive("contactToggle",function(){"use strict";return{link:function(t,e){e.bind("click",function(){$("#app").addClass("is-hidden"),$("#contact").addClass("is-visible")})}}}).directive("closeAbout",function(){"use strict";return{link:function(t,e){e.bind("click",function(){$("#app").removeClass("is-hidden"),$("#contact").removeClass("is-visible")})}}}).directive("masthead",["$timeout",function(t){"use strict";return{scope:{bar:"=url"},link:function(e,o){$(window).height()+"px";e.$watch("bar",function(e){void 0!==e&&$("<img/>").attr("src",e).load(function(){$(this).remove(),o.addClass("is-loaded"),$(".project-abstract").addClass("is-loaded"),t(function(){$(".masthead .more").addClass("bounce-slowly")},3500)})})}}}]).directive("closeLightbox",[function(){"use strict";return{link:function(t,e){e.bind("click",function(){$(".lightbox").addClass("is-hidden"),t.$apply(function(){t.updateLightbox(0)})})}}}]).directive("ripple",[function(){"use strict";return{link:function(t,e){e.bind("click",function(t){console.log("trigger ripple");var e=$("<div/>"),o=$(this).offset(),r=t.pageX-o.left,n=t.pageY-o.top;e.addClass("ripple-effect");var i=$(".ripple-effect");i.css("height",$(this).height()),i.css("width",$(this).height()),e.css({top:n-i.height()/2,left:r-i.width()/2,background:$(this).data("ripple-color")}).appendTo($(this)),window.setTimeout(function(){e.remove()},2e3)})}}}]).directive("scroll",["$window",function(t){function e(){return window.pageYOffset||document.documentElement.scrollTop}return function(){var o=0,r=0,n=$("header.header");angular.element(t).bind("scroll",function(){var t=$(this).scrollTop();t>o?t>0&&(n.hasClass("is-hidden")||r>0&&(n.addClass("is-hidden"),n.removeClass("is-filled"),r=0)):(console.log("scrolling up"),r++,r>2&&(n.removeClass("is-hidden"),n.hasClass("transparent")&&(t>$(window).height()?n.addClass("is-filled"):n.removeClass("is-filled")))),o=e()})}}]);var GOOGLEID="112223276805962705555";angular.module("projects",[]).factory("dataService",["$http","$q",function(t,e){var o="https://picasaweb.google.com/data/feed/api/user/"+GOOGLEID+"/?alt=json";return _createPiasaPhotoUrl=function(t,e){var o=t.split("/"),r=o[0]+"//"+o[2]+"/"+o[3]+"/"+o[4]+"/"+o[5]+"/"+o[6]+"/s1280/"+o[7];return r},{getAlbums:function(){var r=e.defer(),n=[];return t.get(o).success(function(e){var o=e.feed.entry;_.sortBy(o,function(t){var e=new Date(t.updated.$t);return e.getTime()}).reverse(),_.each(o,function(e){console.log(e);var o={};o.id=e.gphoto$id.$t,o.title=e.title.$t,o.modified=e.updated.$t,o.thumbUrl=e.link[0].href,"Profile Photos"!==o.title&&t.get(o.thumbUrl).success(function(t){o.thumb=_createPiasaPhotoUrl(t.feed.entry[0].content.src),n.push(o)}).error(function(t){console.log(t)})}),r.resolve(n)}).error(function(){r.reject}),r.promise},getAlbumThumb:function(){},getAlbumPhotos:function(r){var n={},i="https://picasaweb.google.com/data/feed/api/user/"+GOOGLEID+"/albumid/"+r+"?alt=json&?imgmax=912",c=e.defer();return t.get(i).success(function(e){t.get(o).success(function(t){var o=t.feed.entry;_.each(o,function(t){t.gphoto$id.$t===r&&(n.description=t.summary.$t,console.log(n.description))}),n.title=e.feed.title.$t,n.masthead=_createPiasaPhotoUrl(e.feed.entry[0].content.src);for(var i=[],s=0;s<e.feed.entry.length;s++){var l=e.feed.entry[s],a=l.content.src.split("/"),u=a[0]+"//"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"+a[6]+"/w1200-h1200-c/"+a[7],d=a[0]+"//"+a[2]+"/"+a[3]+"/"+a[4]+"/"+a[5]+"/"+a[6]+"/s1640/"+a[7];l.url=u,l.bigUrl=d,i.push(l)}n.photos=i,c.resolve(n)})}).error(function(){c.reject}),c.promise}}}]);
//# sourceMappingURL=data:application/json;base64,